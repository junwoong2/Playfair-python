## 키값과 암호화할 문장 입력  ##

f=open('c:/Test/Key.txt', 'w')
Key=input("키 값을 입력하시오 : ")
f.write(Key)
f.close()

## 키테이블 만들기 ##

f=open('c:/Test/Key.txt', 'r')
key=f.read()

key=key.replace(" ","") # 키 문장 공백 제거
key=key.replace("\n", "") # 키 문장내 엔터 제거
key=key.upper() #키 문장 대문자로 변환
f.close()

result = list()
for c in key: #키 문장을 먼저 리스트에 넣기
    if c not in result:
        if c=='Z': # Z일경우 Q로 바꿔서 저장
            result.append('Q')
        else:
            result.append(c)

count=0
for i in range(65,91):
    if chr(i) not in result:#result에 포함되지 않은 알파벳 추가
        if i==81 and chr(90) not in result:
            result.append("Q")# Q나 Z가 없다면 Q만 추가해주기
            count=1
        elif count==0 and i==81 or i==90: # Q나Z일 경우 패스
            pass
        else: # result 리스트 내에 없는 알파벳 추가하기
            result.append(chr(i))
           
cnt=0

# 키테이블 배열 정의 하기
keytable=[[0 for i in range(5)]for j in range(5)] 
for i in range(0,5):
    for j in range(0,5):
        keytable[i][j]=result[cnt]
        cnt+=1
        
print(" 5*5 키테이블 ")
for i in range(5):
    print(keytable[i])

# 암호테이블속 문자의 위치를 알려주는 함수
def index(c):
    index = list()
    if(c == 'Z'):
        c = 'Q'
    for i, j in enumerate(keytable):
        for k, l in enumerate(j):
            if c == l:
                index.append(i)
                index.append(k)
                return index

#암호화 함수
def Encrypt():
    f = open("C:/Test/message.txt", "rt", encoding="UTF-8")  # 암호화를 위한 평문 파일을 읽어온다
    txt = f.readlines()  # 파일의 처음 부터 끝까지 읽은후 리스트에 저장한다
    txt = ''.join(txt)  # 리스트에 저장된 내용을 문자열로 바꾼다.
    print("\n[평문 파일 내용]")
    print(txt)
    f.close()
    
    plain = txt
    plain = plain.upper() # 평문을 전부 대문자로 변환한다                     
    plain = plain.replace(" ", "")   # 공백을 제거한다         
    plain = "".join(filter(str.isalnum,plain)) # 특수문자를 제거한다
   
    for s in range(0, len(plain) + 1, 2):# 두 단어가 겹치면 겹치는 문자 사이에 X를 넣고 문자의 수가 홀수일경우 뒤에 X를 넣는다
        if (s < len(plain) - 1):
            if(plain[s] == plain[s + 1]):
                plain = plain[:s + 1] + 'X' + plain[s + 1:]
    if (len(plain) % 2 != 0):
        plain = plain[:] + 'X'

    print("[평문 정리후 내용]")
    print(plain)
       
    print("[암호화 파일 내용]")

    f=open("C:/Test/Encryption.txt", "a") # 암호화파일을 연다 
    c=open("C:/Test/Secret_message.txt", "a") # 복호화를 위한 파일을 연다
    i = 0
    encryption=list()
    while (i < len(plain)):
        loc = list()
        loc = index(plain[i])
        loc1 = list()
        loc1 = index(plain[i + 1])
        if loc[1] == loc1[1]:
            # 두 문자가 같은 열에 있는 경우 한칸 아래에 위치한 문자로 치환한다
            # 맨 밑칸일 경우 제일 위로 간다
            encryption=keytable[(loc[0] + 1) % 5][loc[1]], keytable[(loc1[0] + 1) % 5][loc1[1]]
            print("{}{}".format(keytable[(loc[0] + 1) % 5][loc[1]], keytable[(loc1[0] + 1) % 5][loc1[1]]), end=' ')
        elif loc[0] == loc1[0]:
            # 같은 행에 있는 경우 한칸 오른쪽에 위치한 문자로 치환한다
            # 맨 오른쪽칸일 경우 맨 왼쪽으로 간다
            encryption=keytable[loc[0]][(loc[1] + 1) % 5], keytable[loc1[0]][(loc1[1] + 1) % 5]
            print("{}{}".format(keytable[loc[0]][(loc[1] + 1) % 5], keytable[loc1[0]][(loc1[1] + 1) % 5]), end=' ')
        else:
            # 행과 열이 다를경우 같은 행이 되게 하여 만나는 위치 문자로 치환한다
            encryption=keytable[loc[0]][loc1[1]], keytable[loc1[0]][loc[1]]
            print("{}{}".format(keytable[loc[0]][loc1[1]], keytable[loc1[0]][loc[1]]), end=' ')
        f.writelines(encryption)
        c.writelines(encryption)
        i = i + 2
    
    f.close()
    c.close()


#복호화 함수
def Decrypt():
    f = open("C:/Test/Secret_message.txt", "rt", encoding="UTF-8")  # 읽을 파일을 불러온다
    txt = f.readlines()  # 파일의 처음 부터 끝까지 읽는다.
    txt1 = ''.join(txt)  # 리스트에 저장된 파일의 내용을 문자열로 바꾼다.
    print("\n[암호 파일 내용]")
    print(txt1)
    f.close()

    secret = txt1
    secret = secret.upper()          
    secret = secret.replace(" ", "")
    secret = "".join(filter(str.isalnum,secret))
   
    print("[복호화 파일 내용]")
    
    f=open("C:/Test/Decryption.txt","a")
    i = 0
    decryption=list()
    while (i < len(secret)):
        loc = list()
        loc = index(secret[i])
        loc1 = list()
        loc1 = index(secret[i + 1])
       
        if loc[1] == loc1[1]:
            # 같은 열에 있으면 한칸 위의 문자로 바꾼다
            # 맨 위일 경우 맨 아래 문자로 바꾼다
            decryption=keytable[(loc[0] - 1) % 5][loc[1]], keytable[(loc1[0] - 1) % 5][loc1[1]]
            print("{}{}".format(keytable[(loc[0] - 1) % 5][loc[1]], keytable[(loc1[0] - 1) % 5][loc1[1]]), end=' ')
        elif loc[0] == loc1[0]:
            # 같은 행일 경우 한칸 왼쪽의 문자로 바꾼다
            # 맨 왼쪽일 경우 한칸 오른쪽의 문자로 바꾼다
            decryption=keytable[loc[0]][(loc[1] - 1) % 5], keytable[loc1[0]][(loc1[1] - 1) % 5]
            print("{}{}".format(keytable[loc[0]][(loc[1] - 1) % 5], keytable[loc1[0]][(loc1[1] - 1) % 5]), end=' ')
        else:
            decryption=keytable[loc[0]][loc1[1]], keytable[loc1[0]][loc[1]]
            print("{}{}".format(keytable[loc[0]][loc1[1]], keytable[loc1[0]][loc[1]]), end=' ')
        f.writelines(decryption)
        i = i + 2
    f.close()

# 입력받은 숫자에 따라 암호화 복호화 진행
while(1):
    choice=int(input("\n1.Encryption 2.Decryption 3.Exit\n"))
    if choice==1:
        Encrypt()
    elif choice==2:
        Decrypt()
    elif choice==3:
        exit()
